<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chess Game - GrandmasterMind</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            min-height: 100vh;
            color: #f8fafc;
        }

        /* Navigation */
        .navbar {
            background: rgba(15, 23, 42, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.3);
        }

        .logo {
            font-size: 1.5rem;
            font-weight: 700;
            color: #667eea;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logo i {
            font-size: 2rem;
        }

        .nav-buttons {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            background: rgba(255, 255, 255, 0.1);
            padding: 0.5rem 1rem;
            border-radius: 8px;
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #667eea;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
        }

        .user-details {
            display: flex;
            flex-direction: column;
        }

        .user-name {
            font-weight: 600;
            font-size: 0.9rem;
        }

        .user-stats {
            font-size: 0.75rem;
            opacity: 0.7;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            font-size: 0.9rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-outline {
            background: transparent;
            color: #667eea;
            border: 2px solid #667eea;
        }

        .btn-outline:hover {
            background: #667eea;
            color: white;
        }

        /* Game Container */
        .game-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: calc(100vh - 80px);
            padding: 2rem;
            gap: 2rem;
        }

        /* Chess Board */
        .chess-board-container {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
        }

        .chessboard {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-template-rows: repeat(8, 1fr);
            width: 500px;
            height: 500px;
            border: 3px solid #475569;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
        }

        .square {
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: all 0.2s ease;
        }

        .square.light {
            background-color: #f0d9b5;
        }

        .square.dark {
            background-color: #b58863;
        }

        .square.highlight {
            background-color: #7dd3fc !important;
        }

        .square.selected {
            background-color: #fbbf24 !important;
        }

        .square.valid-move::before {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            background: rgba(34, 197, 94, 0.6);
            border-radius: 50%;
        }

        .piece {
            font-size: 48px;
            cursor: grab;
            user-select: none;
            transition: transform 0.2s ease;
            z-index: 10;
        }

        .piece.white {
            color: white;
            filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.8));
        }

        .piece.black {
            color: black;
            filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
        }

        .piece.dragging {
            opacity: 0.5;
            transform: scale(1.1);
        }

        .piece.draggable {
            cursor: grab;
        }

        .piece.draggable:hover {
            transform: scale(1.05);
        }

        /* Game Info Panel */
        .game-info {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 16px;
            padding: 2rem;
            min-width: 300px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        .game-status {
            text-align: center;
            margin-bottom: 2rem;
        }

        .current-player {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .player-indicator {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
        }

        .player-indicator.white {
            background: rgba(255, 255, 255, 0.2);
        }

        .player-indicator.black {
            background: rgba(0, 0, 0, 0.3);
        }

        .game-actions {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .btn-game {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: #f8fafc;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .move-history {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            padding: 1rem;
            max-height: 200px;
            overflow-y: auto;
        }

        .move-history h3 {
            margin-bottom: 1rem;
            font-size: 1rem;
            color: #cbd5e1;
        }

        .move-list {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            font-size: 0.875rem;
        }

        .move-item {
            padding: 0.25rem 0.5rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
            text-align: center;
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .game-container {
                flex-direction: column;
                gap: 1rem;
            }

            .chessboard {
                width: 400px;
                height: 400px;
            }

            .piece {
                font-size: 40px;
            }
        }

        @media (max-width: 768px) {
            .navbar {
                padding: 1rem;
            }

            .nav-buttons {
                gap: 0.5rem;
            }

            .user-info {
                display: none;
            }

            .chessboard {
                width: 350px;
                height: 350px;
            }

            .piece {
                font-size: 36px;
            }

            .game-info {
                min-width: auto;
                width: 100%;
                max-width: 400px;
            }
        }

        /* Loading Animation */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 100px;
            right: 20px;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            border-left: 4px solid #10b981;
        }

        .toast.error {
            border-left: 4px solid #ef4444;
        }

        .toast.info {
            border-left: 4px solid #3b82f6;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar">
        <div class="logo">
            <i class="fas fa-chess-king"></i>
            GrandmasterMind
        </div>
        <div class="nav-buttons">
            <div class="user-info">
                <% if (user.avatar) { %>
                    <img src="<%= user.avatar %>" alt="Avatar" class="user-avatar">
                <% } else { %>
                    <div class="user-avatar">
                        <%= user.name.charAt(0).toUpperCase() %>
                    </div>
                <% } %>
                <div class="user-details">
                    <div class="user-name"><%= user.name %></div>
                    <div class="user-stats"><%= user.gamesPlayed %> games • <%= user.gamesWon %> wins</div>
                </div>
            </div>
            <a href="/" class="btn btn-outline">
                <i class="fas fa-home"></i>
                Home
            </a>
            <a href="/logout" class="btn btn-outline">
                <i class="fas fa-sign-out-alt"></i>
                Logout
            </a>
        </div>
    </nav>

    <!-- Game Container -->
    <div class="game-container">
        <!-- Chess Board -->
        <div class="chess-board-container">
            <div class="chessboard" id="chessboard">
                <!-- Chess board will be generated by JavaScript -->
            </div>
        </div>

        <!-- Game Info Panel -->
        <div class="game-info">
            <div class="game-status">
                <div class="current-player">Current Turn</div>
                <div class="player-indicator white" id="currentPlayer">
                    <i class="fas fa-chess-king"></i>
                    White's Turn
                </div>
            </div>

            <div class="game-actions">
                <button class="btn-game btn-primary" onclick="newGame()">
                    <i class="fas fa-plus"></i>
                    New Game
                </button>
                <button class="btn-game btn-secondary" onclick="flipBoard()">
                    <i class="fas fa-undo"></i>
                    Flip Board
                </button>
                <button class="btn-game btn-secondary" onclick="undoMove()">
                    <i class="fas fa-undo"></i>
                    Undo Move
                </button>
                <button class="btn-game btn-danger" onclick="resignGame()">
                    <i class="fas fa-flag"></i>
                    Resign
                </button>
            </div>

            <div class="move-history">
                <h3>Move History</h3>
                <div class="move-list" id="moveHistory">
                    <!-- Move history will be populated by JavaScript -->
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toastContainer"></div>

    <!-- Scripts -->
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js"></script>
    <script src="/js/chessgame.js"></script>

    <script>
        // Check authentication
        const token = localStorage.getItem('authToken');
        if (!token) {
            window.location.href = '/login';
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            
            document.getElementById('toastContainer').appendChild(toast);
            
            // Show toast
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Hide and remove toast
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // Game control functions
        function newGame() {
            if (confirm('Start a new game? This will reset the current game.')) {
                // Reset game logic will be handled by chessgame.js
                showToast('New game started!', 'success');
            }
        }

        function flipBoard() {
            // Flip board logic will be handled by chessgame.js
            showToast('Board flipped!', 'info');
        }

        function undoMove() {
            // Undo move logic will be handled by chessgame.js
            showToast('Move undone!', 'info');
        }

        function resignGame() {
            if (confirm('Are you sure you want to resign this game?')) {
                // Resign logic will be handled by chessgame.js
                showToast('Game resigned!', 'error');
            }
        }

        // Logout function
        async function logout() {
            try {
                await fetch('/auth/logout', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
            } catch (error) {
                console.error('Logout error:', error);
            }
            
            localStorage.removeItem('authToken');
            window.location.href = '/';
        }

        // Update current player display
        function updateCurrentPlayer(isWhiteTurn) {
            const playerIndicator = document.getElementById('currentPlayer');
            if (isWhiteTurn) {
                playerIndicator.className = 'player-indicator white';
                playerIndicator.innerHTML = '<i class="fas fa-chess-king"></i> White\'s Turn';
            } else {
                playerIndicator.className = 'player-indicator black';
                playerIndicator.innerHTML = '<i class="fas fa-chess-king"></i> Black\'s Turn';
            }
        }

        // Update move history
        function updateMoveHistory(moves) {
            const moveHistory = document.getElementById('moveHistory');
            moveHistory.innerHTML = '';
            
            moves.forEach((move, index) => {
                const moveItem = document.createElement('div');
                moveItem.className = 'move-item';
                moveItem.textContent = `${Math.floor(index / 2) + 1}. ${move}`;
                moveHistory.appendChild(moveItem);
            });
        }

        // Expose functions to chessgame.js
        window.gameUI = {
            showToast,
            updateCurrentPlayer,
            updateMoveHistory
        };
    </script>
</body>
</html> 