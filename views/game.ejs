<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chess Game - GrandmasterMind</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            min-height: 100vh;
            color: #f8fafc;
        }

        /* Navigation */
        .navbar {
            background: rgba(15, 23, 42, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.3);
        }

        .logo {
            font-size: 1.5rem;
            font-weight: 700;
            color: #667eea;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .logo:hover {
            color: #8b5cf6;
            transform: scale(1.05);
            text-decoration: underline;
        }

        .logo i {
            font-size: 2rem;
        }

        .nav-buttons {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2) 0%, rgba(139, 92, 246, 0.2) 100%);
            padding: 0.75rem 1.25rem;
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            position: relative;
            cursor: pointer;
        }

        .user-info:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
            border-color: rgba(102, 126, 234, 0.3);
        }

        .user-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #8b5cf6 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 1.2rem;
            color: white;
            border: 3px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .user-avatar:hover {
            transform: scale(1.1);
            border-color: rgba(255, 255, 255, 0.4);
        }

        .user-avatar img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
        }

        .user-details {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .user-name {
            font-weight: 700;
            font-size: 1rem;
            color: #f8fafc;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }

        .user-stats {
            font-size: 0.8rem;
            color: rgba(248, 250, 252, 0.8);
            font-weight: 500;
        }

        .profile-arrow {
            color: rgba(248, 250, 252, 0.6);
            font-size: 0.8rem;
            transition: transform 0.3s ease;
        }

        .user-info.active .profile-arrow {
            transform: rotate(180deg);
        }

        .profile-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            background: rgba(15, 23, 42, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            min-width: 200px;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            margin-top: 0.5rem;
        }

        .profile-dropdown.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .dropdown-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 1rem;
            color: #f8fafc;
            cursor: pointer;
            transition: background 0.2s ease;
            font-size: 0.9rem;
        }

        .dropdown-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .dropdown-item i {
            width: 16px;
            color: rgba(248, 250, 252, 0.7);
        }

        .dropdown-divider {
            height: 1px;
            background: rgba(255, 255, 255, 0.1);
            margin: 0.5rem 0;
        }

        /* Welcome Message */
        .welcome-message {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.95) 0%, rgba(139, 92, 246, 0.95) 100%);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            animation: welcomeSlideIn 0.5s ease-out;
            max-width: 400px;
            text-align: center;
        }

        .welcome-content h2 {
            color: white;
            margin-bottom: 1rem;
            font-size: 1.5rem;
            font-weight: 700;
        }

        .welcome-content p {
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 1.5rem;
            font-size: 1rem;
            line-height: 1.5;
        }

        .btn-welcome {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.3s ease;
        }

        .btn-welcome:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        @keyframes welcomeSlideIn {
            0% {
                opacity: 0;
                transform: translate(-50%, -60%);
            }
            100% {
                opacity: 1;
                transform: translate(-50%, -50%);
            }
        }

        @keyframes welcomeSlideOut {
            0% {
                opacity: 1;
                transform: translate(-50%, -50%);
            }
            100% {
                opacity: 0;
                transform: translate(-50%, -60%);
            }
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            font-size: 0.9rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-outline {
            background: transparent;
            color: #667eea;
            border: 2px solid #667eea;
        }

        .btn-outline:hover {
            background: #667eea;
            color: white;
        }

        /* Game Container */
        .game-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: calc(100vh - 80px);
            padding: 2rem;
            gap: 2rem;
        }

        /* Chess Board */
        .chess-board-container {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
        }

        .chessboard {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-template-rows: repeat(8, 1fr);
            width: 500px;
            height: 500px;
            border: 3px solid #475569;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
        }

        .square {
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: all 0.2s ease;
        }

        .square.light {
            background-color: #f0d9b5;
        }

        .square.dark {
            background-color: #b58863;
        }

        .square.highlight {
            background-color: #7dd3fc !important;
        }

        .square.selected {
            background-color: #fbbf24 !important;
        }

        .square.valid-move::before {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            background: rgba(34, 197, 94, 0.6);
            border-radius: 50%;
        }

        .piece {
            font-size: 48px;
            cursor: grab;
            user-select: none;
            transition: transform 0.2s ease;
            z-index: 10;
        }

        .piece.white {
            color: white;
            filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.8));
        }

        .piece.black {
            color: black;
            filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
        }

        .piece.dragging {
            opacity: 0.5;
            transform: scale(1.1);
        }

        .piece.draggable {
            cursor: grab;
        }

        .piece.draggable:hover {
            transform: scale(1.05);
        }

        /* Firecrackers Animations */
        @keyframes explode {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.5);
                opacity: 0.8;
            }
            100% {
                transform: scale(0);
                opacity: 0;
            }
        }

        @keyframes particle {
            0% {
                transform: translate(0, 0) scale(1);
                opacity: 1;
            }
            100% {
                transform: translate(var(--endX, 50px), var(--endY, 50px)) scale(0);
                opacity: 0;
            }
        }

        @keyframes sparkle {
            0% {
                transform: translate(0, 0) scale(1);
                opacity: 1;
            }
            50% {
                transform: translate(var(--endX, 25px), var(--endY, 25px)) scale(1.2);
                opacity: 0.8;
            }
            100% {
                transform: translate(var(--endX, 25px), var(--endY, 25px)) scale(0);
                opacity: 0;
            }
        }

        @keyframes confettiFall {
            0% {
                transform: translate(0, 0) rotate(var(--rotation, 0deg));
                opacity: 1;
            }
            100% {
                transform: translate(var(--endX, 0px), var(--endY, 100vh)) rotate(calc(var(--rotation, 0deg) + 360deg));
                opacity: 0;
            }
        }

        @keyframes modalSlideIn {
            0% {
                transform: translateY(-50px);
                opacity: 0;
            }
            100% {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* Game Info Panel */
        .game-info {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 16px;
            padding: 2rem;
            min-width: 300px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        /* Game Mode Section */
        .game-mode-section {
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .game-mode-section h3 {
            color: #f8fafc;
            margin-bottom: 1rem;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .mode-info {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            margin-top: 1rem;
        }

        .mode-icon {
            font-size: 2rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        .mode-description {
            flex: 1;
        }

        .mode-description p {
            color: rgba(248, 250, 252, 0.8);
            line-height: 1.5;
            margin: 0;
        }

        .difficulty-selector {
            margin-top: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .difficulty-selector label {
            color: rgba(248, 250, 252, 0.8);
            font-weight: 500;
        }

        .difficulty-select {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: #f8fafc;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .difficulty-select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }

        /* Multiplayer Section */
        .multiplayer-section {
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .multiplayer-section h3 {
            color: #f8fafc;
            margin-bottom: 1rem;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .meeting-controls {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .meeting-id-display {
            background: rgba(255, 255, 255, 0.1);
            padding: 1rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .meeting-id-display label {
            color: #f8fafc;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .meeting-id {
            background: rgba(0, 0, 0, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            font-weight: 600;
            color: #10b981;
            font-size: 1.1rem;
            letter-spacing: 1px;
        }

        .btn-copy {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background 0.3s ease;
        }

        .btn-copy:hover {
            background: #2563eb;
        }

        .meeting-actions {
            display: flex;
            gap: 0.5rem;
        }

        .player-status {
            background: rgba(255, 255, 255, 0.1);
            padding: 1rem;
            border-radius: 8px;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #f8fafc;
        }

        .status-indicator i {
            color: #fbbf24;
            animation: pulse 2s infinite;
        }

        .status-indicator.connected i {
            color: #10b981;
            animation: none;
        }

        .status-indicator.playing i {
            color: #3b82f6;
            animation: none;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .game-status {
            text-align: center;
            margin-bottom: 2rem;
        }

        .current-player {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .player-indicator {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
        }

        .player-indicator.white {
            background: rgba(255, 255, 255, 0.2);
        }

        .player-indicator.black {
            background: rgba(0, 0, 0, 0.3);
        }

        .game-actions {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .btn-game {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: #f8fafc;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .captured-pieces {
            margin-bottom: 2rem;
        }

        .captured-pieces h3 {
            margin-bottom: 1rem;
            font-size: 1rem;
            color: #cbd5e1;
        }

        .captured-section {
            margin-bottom: 1rem;
        }

        .captured-label {
            font-size: 0.875rem;
            color: #94a3b8;
            margin-bottom: 0.5rem;
        }

        .captured-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.25rem;
            min-height: 24px;
            padding: 0.5rem;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 6px;
        }

        .captured-piece {
            font-size: 1.2rem;
            padding: 0.25rem;
            border-radius: 4px;
            transition: transform 0.2s ease;
        }

        .captured-piece:hover {
            transform: scale(1.2);
        }

        .captured-piece.white {
            color: white;
            filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.8));
        }

        .captured-piece.black {
            color: black;
            filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3));
        }

        .move-history {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            padding: 1rem;
            max-height: 200px;
            overflow-y: auto;
        }

        .move-history h3 {
            margin-bottom: 1rem;
            font-size: 1rem;
            color: #cbd5e1;
        }

        .move-list {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            font-size: 0.875rem;
        }

        .move-item {
            padding: 0.25rem 0.5rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
            text-align: center;
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .game-container {
                flex-direction: column;
                gap: 1rem;
            }

            .chessboard {
                width: 400px;
                height: 400px;
            }

            .piece {
                font-size: 40px;
            }
        }

        @media (max-width: 768px) {
            .navbar {
                padding: 1rem;
            }

            .nav-buttons {
                gap: 0.5rem;
            }

            .user-info {
                display: none;
            }

            .chessboard {
                width: 350px;
                height: 350px;
            }

            .piece {
                font-size: 36px;
            }

            .game-info {
                min-width: auto;
                width: 100%;
                max-width: 400px;
            }
        }

        /* Loading Animation */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 100px;
            right: 20px;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            border-left: 4px solid #10b981;
        }

        .toast.error {
            border-left: 4px solid #ef4444;
        }

        .toast.info {
            border-left: 4px solid #3b82f6;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar">
        <a href="/" class="logo" style="text-decoration: none; cursor: pointer;">
            <i class="fas fa-chess-king"></i>
            GrandmasterMind
        </a>
        <div class="nav-buttons">
            <div class="user-info" onclick="toggleProfileMenu()">
                <% if (user.avatar) { %>
                    <img src="<%= user.avatar %>" alt="Avatar" class="user-avatar">
                <% } else { %>
                    <div class="user-avatar">
                        <%= user.name.charAt(0).toUpperCase() %>
                    </div>
                <% } %>
                <div class="user-details">
                    <div class="user-name"><%= user.name %></div>
                    <div class="user-stats"><%= user.gamesPlayed || 0 %> games • <%= user.gamesWon || 0 %> wins</div>
                </div>
                <i class="fas fa-chevron-down profile-arrow"></i>
                
                <!-- Profile Dropdown Menu -->
                <div class="profile-dropdown" id="profileDropdown">
                    <div class="dropdown-item">
                        <i class="fas fa-user"></i>
                        <span>Profile</span>
                    </div>
                    <div class="dropdown-item">
                        <i class="fas fa-trophy"></i>
                        <span>Statistics</span>
                    </div>
                    <div class="dropdown-item">
                        <i class="fas fa-cog"></i>
                        <span>Settings</span>
                    </div>
                    <div class="dropdown-divider"></div>
                    <div class="dropdown-item" onclick="logout()">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Logout</span>
                    </div>
                </div>
            </div>
            <a href="/" class="btn btn-outline">
                <i class="fas fa-home"></i>
                Home
            </a>
            <a href="/logout" class="btn btn-outline">
                <i class="fas fa-sign-out-alt"></i>
                Logout
            </a>
        </div>
    </nav>

    <!-- Game Container -->
    <div class="game-container">
        <!-- Welcome Message -->
        <div class="welcome-message" id="welcomeMessage">
            <div class="welcome-content">
                <h2>Welcome back, <%= user.name %>! 👋</h2>
                <% if (gameMode === 'local') { %>
                    <p>Ready to play a local game? You can play both sides on the same device.</p>
                <% } else if (gameMode === 'online') { %>
                    <p>Ready to play online? Create a meeting or join an existing one to play with friends.</p>
                <% } else if (gameMode === 'bot') { %>
                    <p>Ready to challenge the AI? Test your skills against our chess engine.</p>
                <% } else { %>
                    <p>Ready to play some chess? Choose your game mode and start playing.</p>
                <% } %>
                <button class="btn-welcome" onclick="dismissWelcome()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        
        <!-- Chess Board -->
        <div class="chess-board-container">
            <div class="chessboard" id="chessboard">
                <!-- Chess board will be generated by JavaScript -->
                <div style="display: flex; align-items: center; justify-content: center; height: 100%; color: white; font-size: 18px;">
                    Loading chess board...
                </div>
            </div>
        </div>

        <!-- Game Info Panel -->
        <div class="game-info">
            <!-- Game Mode Section -->
            <% if (gameMode === 'local') { %>
                <div class="game-mode-section">
                    <h3>Local Game</h3>
                    <div class="mode-info">
                        <div class="mode-icon">🎮</div>
                        <div class="mode-description">
                            <p>Play both sides on the same device. Perfect for practice or when you want to play alone.</p>
                        </div>
                    </div>
                </div>
            <% } else if (gameMode === 'online') { %>
                <div class="multiplayer-section">
                    <h3>Online Multiplayer</h3>
                    <div class="meeting-controls">
                        <div class="meeting-id-display" id="meetingIdDisplay" style="display: none;">
                            <label>Meeting ID:</label>
                            <div class="meeting-id" id="meetingId"></div>
                            <button class="btn-copy" onclick="copyMeetingId()">
                                <i class="fas fa-copy"></i> Copy
                            </button>
                        </div>
                        <div class="meeting-actions">
                            <button class="btn-game btn-primary" onclick="createMeeting()" id="createMeetingBtn">
                                <i class="fas fa-plus"></i> Create Meeting
                            </button>
                            <button class="btn-game btn-secondary" onclick="joinMeeting()" id="joinMeetingBtn">
                                <i class="fas fa-sign-in-alt"></i> Join Meeting
                            </button>
                        </div>
                        <div class="player-status" id="playerStatus" style="display: none;">
                            <div class="status-indicator" id="statusIndicator">
                                <i class="fas fa-circle"></i>
                                <span id="statusText">Waiting for opponent...</span>
                            </div>
                        </div>
                    </div>
                </div>
            <% } else if (gameMode === 'bot') { %>
                <div class="game-mode-section">
                    <h3>AI Challenge</h3>
                    <div class="mode-info">
                        <div class="mode-icon">🤖</div>
                        <div class="mode-description">
                            <p>Challenge our AI chess engine. Choose your difficulty level and test your skills!</p>
                        </div>
                        <div class="difficulty-selector">
                            <label>Difficulty:</label>
                            <select id="difficultySelect" class="difficulty-select">
                                <option value="easy">Easy</option>
                                <option value="medium" selected>Medium</option>
                                <option value="hard">Hard</option>
                                <option value="expert">Expert</option>
                            </select>
                        </div>
                    </div>
                </div>
            <% } %>

            <div class="game-status">
                <div class="current-player">Current Turn</div>
                <div class="player-indicator white" id="currentPlayer">
                    <i class="fas fa-chess-king"></i>
                    White's Turn
                </div>
            </div>

            <!-- Captured Pieces -->
            <div class="captured-pieces">
                <h3>Captured Pieces</h3>
                <div class="captured-section">
                    <div class="captured-label">White Captured:</div>
                    <div class="captured-container" id="capturedWhite"></div>
                </div>
                <div class="captured-section">
                    <div class="captured-label">Black Captured:</div>
                    <div class="captured-container" id="capturedBlack"></div>
                </div>
            </div>

            <div class="game-actions">
                <button class="btn-game btn-primary" onclick="newGame()">
                    <i class="fas fa-plus"></i>
                    New Game
                </button>
                <button class="btn-game btn-secondary" onclick="flipBoard()">
                    <i class="fas fa-undo"></i>
                    Flip Board
                </button>
                <button class="btn-game btn-secondary" onclick="undoMove()">
                    <i class="fas fa-undo"></i>
                    Undo Move
                </button>
                <button class="btn-game btn-danger" onclick="resignGame()">
                    <i class="fas fa-flag"></i>
                    Resign
                </button>
            </div>

            <div class="move-history">
                <h3>Move History</h3>
                <div class="move-list" id="moveHistory">
                    <!-- Move history will be populated by JavaScript -->
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toastContainer"></div>

    <!-- Scripts -->
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
    <script src="/js/chess.min.js"></script>
    <script src="/js/chessgame.js"></script>

    <script>
        // Check authentication
        const token = localStorage.getItem('authToken');
        if (!token) {
            window.location.href = '/login';
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            
            document.getElementById('toastContainer').appendChild(toast);
            
            // Show toast
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Hide and remove toast
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // Game control functions
        function newGame() {
            if (confirm('Start a new game? This will reset the current game.')) {
                // Reset game logic will be handled by chessgame.js
                showToast('New game started!', 'success');
            }
        }

        function flipBoard() {
            // Flip board logic will be handled by chessgame.js
            showToast('Board flipped!', 'info');
        }

        function undoMove() {
            // Undo move logic will be handled by chessgame.js
            showToast('Move undone!', 'info');
        }

        function resignGame() {
            if (confirm('Are you sure you want to resign this game?')) {
                // Resign logic will be handled by chessgame.js
                showToast('Game resigned!', 'error');
            }
        }

        // Logout function
        async function logout() {
            try {
                await fetch('/auth/logout', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
            } catch (error) {
                console.error('Logout error:', error);
            }
            
            localStorage.removeItem('authToken');
            window.location.href = '/';
        }

        // Update current player display
        function updateCurrentPlayer(isWhiteTurn) {
            const playerIndicator = document.getElementById('currentPlayer');
            if (isWhiteTurn) {
                playerIndicator.className = 'player-indicator white';
                playerIndicator.innerHTML = '<i class="fas fa-chess-king"></i> White\'s Turn';
            } else {
                playerIndicator.className = 'player-indicator black';
                playerIndicator.innerHTML = '<i class="fas fa-chess-king"></i> Black\'s Turn';
            }
        }

        // Update move history
        function updateMoveHistory(moves) {
            const moveHistory = document.getElementById('moveHistory');
            moveHistory.innerHTML = '';
            
            moves.forEach((move, index) => {
                const moveItem = document.createElement('div');
                moveItem.className = 'move-item';
                moveItem.textContent = `${Math.floor(index / 2) + 1}. ${move}`;
                moveHistory.appendChild(moveItem);
            });
        }

        // Multiplayer functions
        function createMeeting() {
            if (window.chessGame) {
                window.chessGame.createMeeting();
            }
        }

        function joinMeeting() {
            const meetingId = prompt('Enter Meeting ID:');
            if (meetingId && meetingId.trim()) {
                if (window.chessGame) {
                    window.chessGame.joinMeeting(meetingId.trim());
                }
            }
        }

        function copyMeetingId() {
            const meetingId = document.getElementById('meetingId').textContent;
            navigator.clipboard.writeText(meetingId).then(() => {
                showToast('Meeting ID copied to clipboard!', 'success');
            }).catch(() => {
                showToast('Failed to copy meeting ID', 'error');
            });
        }

        function toggleProfileMenu() {
            const dropdown = document.getElementById('profileDropdown');
            const userInfo = document.querySelector('.user-info');
            
            if (dropdown.classList.contains('show')) {
                dropdown.classList.remove('show');
                userInfo.classList.remove('active');
            } else {
                dropdown.classList.add('show');
                userInfo.classList.add('active');
            }
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const userInfo = document.querySelector('.user-info');
            const dropdown = document.getElementById('profileDropdown');
            
            if (!userInfo.contains(event.target)) {
                dropdown.classList.remove('show');
                userInfo.classList.remove('active');
            }
        });

        function dismissWelcome() {
            const welcomeMessage = document.getElementById('welcomeMessage');
            welcomeMessage.style.animation = 'welcomeSlideOut 0.3s ease-out';
            setTimeout(() => {
                welcomeMessage.style.display = 'none';
            }, 300);
        }

        // Auto-dismiss welcome message after 5 seconds
        setTimeout(() => {
            const welcomeMessage = document.getElementById('welcomeMessage');
            if (welcomeMessage && welcomeMessage.style.display !== 'none') {
                dismissWelcome();
            }
        }, 5000);

        // Expose functions to chessgame.js
        window.gameUI = {
            showToast,
            updateCurrentPlayer,
            updateMoveHistory
        };
    </script>
</body>
</html> 