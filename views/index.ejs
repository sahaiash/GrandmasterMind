<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <!-- Favicon: Chess King SVG -->
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Crect x='18' y='38' width='12' height='4' rx='2' fill='%23333'/%3E%3Crect x='20' y='34' width='8' height='4' rx='2' fill='%23b58863'/%3E%3Crect x='22' y='12' width='4' height='22' rx='2' fill='%23f0d9b5'/%3E%3Crect x='20' y='8' width='8' height='6' rx='2' fill='%23b58863'/%3E%3Crect x='23' y='4' width='2' height='6' rx='1' fill='%23333'/%3E%3C/svg%3E">
    <link href="/css/styles.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            min-height: 100vh;
            background: linear-gradient(120deg, #4f46e5 0%, #7c3aed 50%, #06b6d4 100%);
            background-size: 400% 400%;
            animation: animatedGradient 16s ease-in-out infinite;
            overflow-x: hidden;
        }

        @keyframes animatedGradient {
            0% { background-position: 0% 50%; }
            25% { background-position: 50% 100%; }
            50% { background-position: 100% 50%; }
            75% { background-position: 50% 0%; }
            100% { background-position: 0% 50%; }
        }

        /* SVG Blob Overlays */
        .background-blob, .background-blob2 {
            pointer-events: none;
            position: fixed;
            z-index: 0;
            opacity: 0.18;
            animation: blobFloat 18s ease-in-out infinite alternate;
        }
        .background-blob {
            top: -120px; left: -120px; width: 600px; height: 600px;
        }
        .background-blob2 {
            bottom: -140px; right: -140px; width: 700px; height: 700px; opacity: 0.13;
            animation-delay: 4s;
        }
        @keyframes blobFloat {
            0% { transform: scale(1) translateY(0); }
            100% { transform: scale(1.08) translateY(-30px); }
        }

        /* Navigation */
        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: rgba(34, 34, 34, 0.82);
            backdrop-filter: blur(16px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 1000;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: #fff;
            text-decoration: none;
            font-size: 1.5rem;
            font-weight: 900;
            text-shadow: 0 2px 8px rgba(67, 206, 162, 0.18), 0 1px 0 #222;
        }

        .logo svg {
            width: 32px;
            height: 32px;
            filter: drop-shadow(0 2px 8px rgba(67, 206, 162, 0.18));
        }

        .nav-buttons {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            font-weight: 700;
            text-decoration: none;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.95rem;
            border: none;
            cursor: pointer;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
        }

        .btn-outline {
            background: transparent;
            color: #fff;
            border: 2px solid rgba(255, 255, 255, 0.3);
            backdrop-filter: blur(10px);
        }

        .btn-outline:hover {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.5);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
        }

        .btn-primary {
            background: linear-gradient(90deg, #43cea2 0%, #667eea 100%);
            color: #fff;
            font-weight: 800;
            border: none;
            box-shadow: 0 4px 16px rgba(67, 206, 162, 0.18);
        }

        .btn-primary:hover {
            background: linear-gradient(90deg, #667eea 0%, #43cea2 100%);
            transform: translateY(-2px) scale(1.04);
            box-shadow: 0 8px 24px rgba(67, 206, 162, 0.25);
        }

        .btn-large {
            padding: 1rem 2rem;
            font-size: 1.1rem;
        }

        /* Hero Section */
        .hero {
            min-height: 100vh;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            padding: 8rem 2rem 4rem 2rem;
            gap: 4rem;
            position: relative;
            z-index: 1;
        }

        .hero-content {
            flex: 1;
            max-width: 500px;
            text-align: left;
            opacity: 0;
            transform: translateY(40px);
            animation: fadeSlideDown 1.1s cubic-bezier(.4,0,.2,1) 0.2s both;
        }

        .game-title {
            font-size: 3.5rem;
            font-weight: 900;
            margin-bottom: 1rem;
            background: linear-gradient(90deg, #43cea2 0%, #667eea 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 4px 16px rgba(67, 206, 162, 0.18);
            animation: fadeSlideLeft 1.1s cubic-bezier(.4,0,.2,1) 0.4s both;
        }

        .hero-subtitle {
            font-size: 1.3rem;
            color: #f3f3f3;
            margin-bottom: 2rem;
            font-weight: 600;
            text-shadow: 0 2px 8px rgba(67, 206, 162, 0.15);
            line-height: 1.6;
            opacity: 0;
            transform: translateY(30px);
            animation: fadeSlideUp 1.1s cubic-bezier(.4,0,.2,1) 0.7s both;
        }

        .hero-buttons {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            opacity: 0;
            transform: translateY(30px);
            animation: fadeSlideUp 1.1s cubic-bezier(.4,0,.2,1) 1.1s both;
        }

        .chess-section {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            animation: fadeSlideRight 1.2s cubic-bezier(.4,0,.2,1) 0.7s both;
        }

        .chess-board-container {
            position: relative;
            display: inline-block;
            opacity: 0;
            transform: scale(0.92) translateY(40px);
            animation: boardPopIn 1.2s cubic-bezier(.4,0,.2,1) 1.2s both;
        }

        .chess-board {
            width: 320px;
            height: 320px;
            border: 3px solid #b58863;
            border-radius: 8px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            position: relative;
            background: linear-gradient(45deg, #f0d9b5, #b58863);
            overflow: hidden;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-template-rows: repeat(8, 1fr);
            animation: boardFloat 4s ease-in-out infinite, waveFlow 6s ease-in-out infinite;
        }
        
        .chess-board:hover {
            box-shadow: 0 20px 60px 0 #43cea288, 0 0 0 12px #43cea244;
            transform: scale(1.05) rotate(-2deg);
            animation-play-state: paused;
        }

        @keyframes boardFloat {
            0%, 100% { 
                transform: translateY(0px) rotate(0deg);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            }
            25% { 
                transform: translateY(-8px) rotate(0.5deg);
                box-shadow: 0 16px 40px rgba(0, 0, 0, 0.4);
            }
            50% { 
                transform: translateY(-4px) rotate(-0.5deg);
                box-shadow: 0 12px 36px rgba(0, 0, 0, 0.35);
            }
            75% { 
                transform: translateY(-12px) rotate(1deg);
                box-shadow: 0 20px 44px rgba(0, 0, 0, 0.45);
            }
        }

        @keyframes waveFlow {
            0%, 100% { 
                background: linear-gradient(45deg, #f0d9b5, #b58863);
            }
            25% { 
                background: linear-gradient(45deg, #e8d4a8, #a07a50);
            }
            50% { 
                background: linear-gradient(45deg, #d4c095, #8b6b3f);
            }
            75% { 
                background: linear-gradient(45deg, #e0c8a0, #967a4a);
            }
        }

        .chess-square {
            width: 100%;
            height: 100%;
            opacity: 0;
            transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(0,0,0,0.1);
            transform: scale(0.8) rotate(180deg);
            filter: blur(2px);
        }

        .chess-square.light {
            background: linear-gradient(135deg, #f0d9b5 60%, #fffbe6 100%);
            position: relative;
            overflow: hidden;
        }

        .chess-square.dark {
            background: linear-gradient(135deg, #b58863 60%, #a07a50 100%);
            position: relative;
            overflow: hidden;
        }

        .chess-square.light::before,
        .chess-square.dark::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.3) 50%, transparent 70%);
            transform: rotate(45deg);
            animation: waveSweep 4s ease-in-out infinite;
            animation-delay: calc(var(--square-index) * 0.1s);
        }

        @keyframes waveSweep {
            0% { 
                transform: rotate(45deg) translateX(-100%) translateY(-100%);
                opacity: 0;
            }
            50% { 
                opacity: 0.6;
            }
            100% { 
                transform: rotate(45deg) translateX(100%) translateY(100%);
                opacity: 0;
            }
        }
        
        .chess-square.animated {
            opacity: 1 !important;
            transform: scale(1) rotate(0deg) !important;
            filter: blur(0px) !important;
            animation: wavePattern 3s ease-in-out infinite;
        }

        .chess-square.animated:nth-child(odd) {
            animation-delay: 0.3s;
        }

        .chess-square.animated:nth-child(3n) {
            animation-delay: 0.6s;
        }

        .chess-square.animated:nth-child(5n) {
            animation-delay: 0.9s;
        }

        @keyframes wavePattern {
            0%, 100% { 
                transform: scale(1) rotate(0deg) translateY(0px);
                filter: brightness(1) hue-rotate(0deg);
                border-radius: 0px;
            }
            25% { 
                transform: scale(1.05) rotate(2deg) translateY(-3px);
                filter: brightness(1.15) hue-rotate(10deg);
                border-radius: 2px;
            }
            50% { 
                transform: scale(1.08) rotate(-1deg) translateY(-6px);
                filter: brightness(1.25) hue-rotate(20deg);
                border-radius: 4px;
        }
            75% { 
                transform: scale(1.03) rotate(3deg) translateY(-2px);
                filter: brightness(1.1) hue-rotate(15deg);
                border-radius: 1px;
            }
        }

        .chess-board::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #43cea2, #667eea, #06b6d4, #43cea2);
            background-size: 400% 400%;
            border-radius: 10px;
            z-index: -1;
            animation: borderGlow 4s ease-in-out infinite, borderRotate 8s linear infinite;
        }

        @keyframes borderGlow {
            0%, 100% { 
                opacity: 0.7;
                background-position: 0% 50%;
            }
            50% { 
                opacity: 1;
                background-position: 100% 50%;
            }
        }

        @keyframes borderRotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .floating-piece {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 60px;
            height: 60px;
            z-index: 10;
            animation: floatKing 3.2s ease-in-out infinite alternate, glowKing 2.8s ease-in-out infinite alternate, rotateKing 8s linear infinite;
        }

        @keyframes floatKing {
            0% { transform: translate(-50%, -50%) scale(1) rotate(-2deg); }
            50% { transform: translate(-50%, -65%) scale(1.12) rotate(1deg); }
            100% { transform: translate(-50%, -55%) scale(1.05) rotate(3deg); }
        }

        @keyframes glowKing {
            0% { filter: drop-shadow(0 0 10px #43cea2) drop-shadow(0 0 20px #667eea44); }
            50% { filter: drop-shadow(0 0 30px #43cea2) drop-shadow(0 0 60px #667eea88); }
            100% { filter: drop-shadow(0 0 15px #43cea2) drop-shadow(0 0 30px #667eea66); }
        }

        @keyframes rotateKing {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }

        /* Animations */
        @keyframes fadeSlideDown {
            from {
                opacity: 0;
                transform: translateY(40px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
        }
        }

        @keyframes fadeSlideLeft {
            from {
                opacity: 0;
                transform: translateX(-40px);
        }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes fadeSlideRight {
            from {
                opacity: 0;
                transform: translateX(40px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes fadeSlideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes boardPopIn {
            0% {
                opacity: 0;
                transform: scale(0.92) translateY(40px);
            }
            60% {
                opacity: 1;
                transform: scale(1.05) translateY(-10px);
            }
            100% {
                opacity: 1;
                transform: scale(1) translateY(0);
        }
        }

        @keyframes ctaPopIn {
            0% {
                opacity: 0;
                transform: scale(0.8) translateY(30px);
            }
            60% {
                opacity: 1;
                transform: scale(1.08) translateY(-8px);
            }
            100% {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }

        .btn-primary.btn-large {
            animation: ctaPopIn 0.7s cubic-bezier(.4,0,.2,1) 0.7s both;
        }

        .btn-primary.btn-large:hover {
            box-shadow: 0 0 0 6px #43cea244, 0 8px 24px #43cea244;
            transform: scale(1.06) translateY(-3px);
            animation: none;
        }

        /* User Menu */
        .user-menu {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-info {
            color: #fff;
            text-align: right;
        }

        .user-name {
            font-weight: 600;
            font-size: 0.9rem;
        }

        .user-email {
            font-size: 0.8rem;
            opacity: 0.8;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .hero {
                flex-direction: column;
                gap: 2rem;
                padding: 6rem 1rem 2rem 1rem;
            }

            .hero-content {
                text-align: center;
                max-width: 100%;
            }

            .game-title {
                font-size: 2.5rem;
            }

            .hero-subtitle {
                font-size: 1.1rem;
            }

            .chess-board {
                width: 280px;
                height: 280px;
            }

            .navbar {
                padding: 1rem;
            }

            .nav-buttons {
                gap: 0.5rem;
            }

            .btn {
                padding: 0.6rem 1rem;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <!-- Animated SVG Blobs for background -->
    <svg class="background-blob" viewBox="0 0 600 600" xmlns="http://www.w3.org/2000/svg">
      <g transform="translate(300,300)">
        <path d="M120,-180C160,-140,200,-100,200,-60C200,-20,160,20,120,60C80,100,40,140,0,180C-40,220,-80,260,-120,220C-160,180,-200,140,-200,100C-200,60,-160,20,-120,-20C-80,-60,-40,-100,0,-140C40,-180,80,-220,120,-180Z" fill="#fff"/>
      </g>
    </svg>
    <svg class="background-blob2" viewBox="0 0 700 700" xmlns="http://www.w3.org/2000/svg">
      <g transform="translate(350,350)">
        <path d="M180,-220C220,-180,260,-140,260,-100C260,-60,220,-20,180,20C140,60,100,100,60,140C20,180,-20,220,-60,180C-100,140,-140,100,-140,60C-140,20,-100,-20,-60,-60C-20,-100,20,-140,60,-180C100,-220,140,-260,180,-220Z" fill="#fff"/>
      </g>
    </svg>

    <!-- Navigation -->
    <nav class="navbar">
        <a href="/" class="logo">
            <svg width="32" height="32" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect x="18" y="38" width="12" height="4" rx="2" fill="#333"/>
                <rect x="20" y="34" width="8" height="4" rx="2" fill="#b58863"/>
                <rect x="22" y="12" width="4" height="22" rx="2" fill="#f0d9b5"/>
                <rect x="20" y="8" width="8" height="6" rx="2" fill="#b58863"/>
                <rect x="23" y="4" width="2" height="6" rx="1" fill="#333"/>
            </svg>
            GrandmasterMind
        </a>
        
        <div class="nav-buttons">
            <% if (user) { %>
                <div class="user-menu">
                    <div class="user-info">
                        <div class="user-name"><%= user.name %></div>
                        <div class="user-email"><%= user.email %></div>
                    </div>
                    <a href="/game" class="btn btn-primary">
                        <i class="fas fa-chess"></i>
                        Play Game
                    </a>
                    <a href="/logout" class="btn btn-outline">
                        <i class="fas fa-sign-out-alt"></i>
                        Logout
                    </a>
                </div>
            <% } else { %>
                <a href="/login" class="btn btn-outline">
                    <i class="fas fa-sign-in-alt"></i>
                    Sign In
                </a>
                <a href="/signup" class="btn btn-primary">
                    <i class="fas fa-user-plus"></i>
                    Get Started
                </a>
            <% } %>
        </div>
    </nav>

    <!-- Hero Section -->
    <section class="hero">
        <div class="hero-content">
            <h1 class="game-title">GrandmasterMind</h1>
            <p class="hero-subtitle">Master the game of kings with our intelligent chess platform. Challenge players worldwide, improve your strategy, and become a true grandmaster.</p>
            
            <div class="hero-buttons">
                <a href="/login" class="btn btn-primary btn-large">
                    <i class="fas fa-chess"></i>
                        Start Playing
                    </a>
            </div>
            </div>
            
        <div class="chess-section">
            <div class="chess-board-container">
                <div class="chess-board">
                    <% for(let i = 0; i < 8; i++) { %>
                        <% for(let j = 0; j < 8; j++) { %>
                            <div class="chess-square <%= (i + j) % 2 === 0 ? 'light' : 'dark' %>"></div>
                        <% } %>
                    <% } %>
                </div>
                <div class="floating-piece">
                    <svg width="60" height="60" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <rect x="18" y="38" width="12" height="4" rx="2" fill="#333"/>
                        <rect x="20" y="34" width="8" height="4" rx="2" fill="#b58863"/>
                        <rect x="22" y="12" width="4" height="22" rx="2" fill="#f0d9b5"/>
                        <rect x="20" y="8" width="8" height="6" rx="2" fill="#b58863"/>
                        <rect x="23" y="4" width="2" height="6" rx="1" fill="#333"/>
                    </svg>
                </div>
            </div>
        </div>
    </section>

    <script>
        // Enhanced chess board animations
        document.addEventListener('DOMContentLoaded', function() {
            const squares = document.querySelectorAll('.chess-square');
            const board = document.querySelector('.chess-board');
            console.log('Found', squares.length, 'chess squares');
            
            // Add entrance animation to board
            board.style.opacity = '0';
            board.style.transform = 'scale(0.5) rotate(180deg)';
            
            setTimeout(() => {
                board.style.transition = 'all 1.2s cubic-bezier(0.4, 0, 0.2, 1)';
                board.style.opacity = '1';
                board.style.transform = 'scale(1) rotate(0deg)';
            }, 500);
            
            // Animate squares with wavy pattern effect
            squares.forEach((square, index) => {
                const row = Math.floor(index / 8);
                const col = index % 8;
                // Create wave pattern: diagonal wave from top-left to bottom-right
                const waveDelay = (row + col) * 80 + Math.sin(row * 0.5) * 100;
                
                // Set CSS custom property for wave sweep animation
                square.style.setProperty('--square-index', index);
                
                setTimeout(() => {
                    square.classList.add('animated');
                    
                    // Add wave ripple effect on click
                    square.addEventListener('click', function() {
                        // Create ripple effect
                        this.style.transform = 'scale(1.15) rotate(8deg) translateY(-8px)';
                        this.style.filter = 'brightness(1.4) hue-rotate(30deg)';
                        this.style.borderRadius = '8px';

                        // Ripple to neighboring squares
                        const neighbors = getNeighborSquares(index);
                        neighbors.forEach((neighborIndex, i) => {
                            if (squares[neighborIndex]) {
                                setTimeout(() => {
                                    squares[neighborIndex].style.transform = 'scale(1.08) rotate(4deg) translateY(-4px)';
                                    squares[neighborIndex].style.filter = 'brightness(1.2) hue-rotate(15deg)';
                                    setTimeout(() => {
                                        squares[neighborIndex].style.transform = '';
                                        squares[neighborIndex].style.filter = '';
                                    }, 400);
                                }, i * 50);
                            }
                        });
                        
                        setTimeout(() => {
                            this.style.transform = '';
                            this.style.filter = '';
                            this.style.borderRadius = '';
                        }, 500);
                    });
                }, waveDelay);
            });
            
            // Function to get neighboring squares for ripple effect
            function getNeighborSquares(index) {
                const row = Math.floor(index / 8);
                const col = index % 8;
                const neighbors = [];
                
                // Check all 8 directions
                const directions = [
                    [-1, -1], [-1, 0], [-1, 1],
                    [0, -1],           [0, 1],
                    [1, -1],  [1, 0],  [1, 1]
                ];
                
                directions.forEach(([dr, dc]) => {
                    const newRow = row + dr;
                    const newCol = col + dc;
                    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {
                        neighbors.push(newRow * 8 + newCol);
                    }
                });
                
                return neighbors;
            }
            
            // Add hover effects to board
            board.addEventListener('mouseenter', function() {
                this.style.animationPlayState = 'paused';
            });
            
            board.addEventListener('mouseleave', function() {
                this.style.animationPlayState = 'running';
            });
            
            // Fallback: if no squares found, show them after 3 seconds
            setTimeout(() => {
                const animatedSquares = document.querySelectorAll('.chess-square.animated');
                if (animatedSquares.length === 0) {
                    console.log('Fallback: Making all squares visible');
                    squares.forEach(square => square.classList.add('animated'));
                }
            }, 3000);
        });
    </script>
</body>
</html>
